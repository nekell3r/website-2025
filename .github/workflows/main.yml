name: Backend CI/CD

on:
  push:
    branches:
      - backend  # <--- Запускать при пуше в ветку backend
  pull_request:
    branches:
      - backend  # <--- Опционально: запускать при создании/обновлении Pull Request в ветку backend
      - main     # <--- Опционально: если вы хотите PR и в main потом

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        container_name: postgres
        env:
          POSTGRES_USER: test_user       # Фиксированное значение
          POSTGRES_PASSWORD: test_password # Фиксированное значение
          POSTGRES_DB: test_db         # Фиксированное значение
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --network-alias postgres
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Укажите вашу версию Python, например 3.11 или 3.12. 3.13 может быть еще не везде доступна/стабильна в CI.

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 'latest' # или конкретную версию poetry, например '1.7.1'
          virtualenvs-create: true # Рекомендуется создавать виртуальное окружение
          virtualenvs-in-project: true # Рекомендуется создавать .venv в проекте для консистентности
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv # Путь к кэшируемой директории .venv в ./backend
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        working-directory: ./backend # Для шага 'Install dependencies'

      - name: Install project # Пустая строка перед этим шагом важна для читаемости
        run: poetry install --no-interaction
        working-directory: ./backend # Для шага 'Install project'

      - name: Run linters (Black & Ruff) - Опционально, но рекомендуется
        working-directory: ./backend
        run: |
          poetry run black --check .
          poetry run ruff check .

      - name: Run tests
        working-directory: ./backend
        env:
          MODE: "TEST"

          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user          # То же фиксированное значение
          DB_PASS: test_password      # То же фиксированное значение
          DB_NAME: test_db            # То же фиксированное значение

          REDIS_HOST: redis
          REDIS_PORT: 6379

          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_CI }}
          JWT_ALGORITHM: "HS256"
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY_CI }}
          REFRESH_TOKEN_EXPIRE_DAYS: 7

          YOOKASSA_SHOP_ID: ${{ secrets.YOOKASSA_SHOP_ID_CI }}
          YOOKASSA_SECRET_KEY: ${{ secrets.YOOKASSA_SECRET_KEY_CI }}
          YOOKASSA_API_URL: "https://api.yookassa.ru/v3/payments"

          SMSRU_API_ID: ${{ secrets.SMSRU_API_ID_CI }}
        run: poetry run pytest
        
      # - name: Build Docker image (опционально, если нужно для CI/CD)
      #   run: docker build -t madrussian-backend:latest -f Dockerfile .
      #   working-directory: ./backend # Путь остается тот же, так как Dockerfile там